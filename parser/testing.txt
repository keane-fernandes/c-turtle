%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                                    TESTING

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

This document describes how I went about testing the parser, interpreter and
extension for the Turtle Graphics coursework.

===============================================================================
Parser Testing - test_parser.c
===============================================================================

For the parser, a combination of blackbox and whitebox testing was
used. The testing methodology is summarised as follows:

1. I wrote 39 unit tests to check and validate individual parts of the grammar.  
   These files can be found in Parser/ttl_files/Unit_tests. 
2. The unit tests are named using the format UTXXX_instruction_description_of_test
   where XXX represents the test number.
3. There is a demo unit test called 'UT_999_Demo_for_Neill.ttl' which has been 
   written to fail, to get a glimpse of what happens in the event of a failed unit test.
4. I wrote a test harness which automates execution of these unit tests, and 
   produces a summary of the results on the terminal window, highlighting which
   tests failed. The test harness can be found in Parser/test_parser.c .
5. Additionally, assert testing was done on the parsing functions and can be found
   in the test harness.
6. The test harness can be compiled and run by changing the current directory to 
   the 'Parser' folder and typing the following at the command line:

                           |=====================|
                           | make run_test_parse | 
                           |=====================|

6. I then batch tested the parser on more .ttl files in Parser/ttl_files/Black_box 
   using the same test harness. To do this, kindly navigate to Parser/test_parser.c
   and uncomment the #define TSTDIR "ttl_files/Black_box" and comment out the
   the previous #define TSTDIR. Then type: make run_test_parse for test automation.

7. I exchanged .ttl files with my course mate Harri Grace, and this populated 
   our respective repositories for more black box testing.

===============================================================================
Interpreter Testing - test_interpreter.c
===============================================================================

For the interpreter, I relied a lot more on assert testing to make sure that the
tokens being parsed translated into logical interpretations. The testing methodology
is summarised as follows:

1. The interpreter related functions were mainly assert tested to ensure that
   the grammar was being interpreted as expected. All of these asserts can be
   found in Interpreter/test_interpreter.c
2. I intentionally made the interpreter functions return booleans which made 
   assert testing a lot easier.
3. I wrote a separate version of the interpreter so that it had no output in SDL.
   I then used the same test harness I wrote for the parser to automate the
   execution of various .ttl files in Interpreter/ttl_files/Black_box.
4. I saved screenshots of the output of some of the .ttl files in
   Interpreter/samples for your reference.
5. The test harness is called test_interpreter.c and can be compiled and run by changing
   the current directory to the 'Interpreter' folder and typing the following at the
   command line:

                           |==========================|
                           | make run_test_interpreter| 
                           |==========================|


6. Upon successful completion, a test summary should be printed on to the screen.


===============================================================================
Extension Testing - test_extension.c
===============================================================================

For my extension, I adopted the same test methodology as the interpreter. I mainly
assert tested and did black box testing on some .ttl files I wrote. The asserts are
in Extension/test_extension.c . 

I retained all of the previous assertions and tested my extension on all of the
previously written .ttl files for the interpreter. 

The test harness is called test_extension.c and can be compiled and run by changing
the current directory to the 'Extension' folder and typing the following at the
command line:

                           |==========================|
                           | make run_test_extension  | 
                           |==========================|

I saved screenshots of the output of some of the .ttl files in Extension/samples
for your reference.

===============================================================================
Auxiliary Functions
===============================================================================

The auxiliary functions were trivial, and testing for functions such as file
opening and checking allocated pointers was done using the -fsanitize flags.

Most of the auxiliary functions were taken directly from Prof. Campbell's 
Github repository at www.github.com/csnwc/ADTs. They were tested beforehand, 
and hence were directly included without any testing from my side, with consent
from Prof. Campbell.

